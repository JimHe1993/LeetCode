class Solution:
    letter_map = [
        ' ', '', 'abc', 'def', 'ghi', 'jkl', 'mno', 'pqrs', 'tuv', 'wxyz'
    ]
    
    res = []
    
    # 其实就是树形问题
    #              2
    #           a  b  c
    #           3  3  3
    #         d e f ......
    # 递归实现，从树根到叶子便形成一个组合，中间有for循环，保证遍历到每一条路径
    
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        Solution.res.clear()
        if not len(digits):
            return Solution.res
        
        self.find_combinations(digits, 0, '')
        return Solution.res
    
    def find_combinations(self, digits, idx, pre_str):  # idx表示现在到了哪一个数字了，pre_str表示之前所有数字形成的组合之一
        if idx == len(digits):
            Solution.res.append(pre_str)
            return
        
        cur_ch = digits[idx]
        assert '0' <= cur_ch <= '9' and cur_ch != '1'
        letters = Solution.letter_map[ord(cur_ch) - ord('0')]
        for letter in letters:
            self.find_combinations(digits, idx + 1, pre_str + letter)
        
