# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def removeElements(self, head, val):
        """
        :type head: ListNode
        :type val: int
        :rtype: ListNode
        """
        # while head:
        #     if head.val == val:
        #         temp_node = head
        #         head = head.next
        #         temp_node.next = None
        #         del temp_node
        #     else:
        #         break
        # cur = head
        # while cur:
        #     if cur.next:
        #         if cur.next.val == val:
        #             del_node = cur.next
        #             cur.next = del_node.next
        #             del_node.next = None
        #             del del_node
        #         else:
        #             cur = cur.next
        #     else:
        #         break
        # return head
        
        # while head and head.val == val:
        #     del_node = head
        #     head = head.next
        #     del_node.next = None
        #     del del_node
        # if not head:
        #     return None
        # prev = head
        # while prev.next:
        #     if prev.next.val == val:
        #         del_node = prev.next
        #         prev.next = del_node.next
        #         del_node.next = None
        #         del del_node
        #     else:
        #         prev = prev.next
        # return head
        
        # dummy_head = ListNode(-1)
        # dummy_head.next = head
        # prev = dummy_head
        # while prev.next:
        #     if prev.next.val == val:
        #         prev.next = prev.next.next
        #     else:
        #         prev = prev.next
        # return dummy_head.next
        
        if not head:
            return None
        
        head.next = self.removeElements(head.next, val)
        if head.val == val:
            return head.next
        else:
            return head
        
