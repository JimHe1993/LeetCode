# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        new_head = None
        if not head:
            return new_head
        
        # 迭代
        new_head = ListNode(head.val)
        node = head
        while node.next:
            temp_node = ListNode(node.next.val)
            temp_node.next = new_head
            new_head = temp_node
            node = node.next
        return new_head
        
        # 递归
        # new_head = self.__reverse(head)
        # return new_head
    
    def __reverse(self, node):
        if not node.next:
            return node
        temp_head = self.__reverse(node.next)
        p = temp_head
        while p.next:
            p = p.next
        node.next = None
        p.next = node
        return temp_head
