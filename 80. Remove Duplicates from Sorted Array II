# class Solution:
#     def removeDuplicates(self, nums):
#         """
#         :type nums: List[int]
#         :rtype: int
#         """
#         if not nums:
#             return 0
#         # [0...i] 前部分，(i...j)前部分中某些元素的重复
#         i = 0
#         j = 1
#         count = 1  # 当列表不为空时初始计数1
#         while j < len(nums):
#             if nums[j] == nums[i]:
#                 if count < 2:
#                     i += 1
#                     count += 1
#                 else:
#                     del nums[j]
#                     j -= 1
#             else:
#                 count = 1
#                 i += 1
#                 nums[i], nums[j] = nums[j], nums[i]
#             j += 1
#         return i + 1

class Solution:
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        # 给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素最多出现两次，
        # 返回移除后数组的新长度。在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。
        # 遍历数组，[0, i]存放满足要求的值，(i, j)重复值
        if not nums:
            return 0
        i = 0
        j = 1
        count = 1  # 当前i索引位置所指元素个数
        while j < len(nums):
            if nums[j] == nums[i]:
                if count == 1:
                    count += 1
                    i += 1
                    if i != j:
                        nums[i], nums[j] = nums[j], nums[i]
            else:
                count = 1
                i += 1
                if i != j:
                    nums[i], nums[j] = nums[j], nums[i]
            j += 1
        return i + 1
