class Solution:
    def wordPattern(self, pattern, str):
        """
        :type pattern: str
        :type str: str
        :rtype: bool
        """
        '''
        简单基础的自然语言处理模式识别
        问题模型：特定场景下，按照规约的问题模式，对用户未知的信息（文本）进行模式识别
        简单例子：音乐识别和归类
        规定音乐识别模式：曲名+演唱者+音乐类型+专辑
        当检索相关音乐搜索时，必定需要做模式匹配，然后进行归类结果反馈
        '''
        '''
        本题抽象出最简单的单词模式，并且假定了字符串中以空格划分子串
        所以，只需要依次匹配子串，如果全部匹配成功，则返回True，否则返回False
        具体实现方法：
        依次匹配单词-模式字符对和模式字符-单词对，
        显然应该借用字典做快速实现的数据结构
        友情提示：注意比较顺序性，不可丢失
        '''
        if not str and not pattern:
            return True
        if not str or not pattern:
            return False
        str_list = str.split(' ')
        if len(pattern) != len(str_list):
            return False
        dict_p_str = {}  # 用于存放字符-单词对
        dict_str_p = {}  # 用于存放单词-字符对
        for idx, p_ch in enumerate(pattern):  # 检查所有单词-字符与字符-单词能否一一对应
            if p_ch not in dict_p_str:
                if str_list[idx] in dict_str_p:
                    return False
                dict_p_str[p_ch] = str_list[idx]
                dict_str_p[str_list[idx]] = p_ch
            else:
                if dict_p_str[p_ch] != str_list[idx]:
                    return False
        return True


if __name__ == "__main__":
    solve = Solution()
    print(solve.wordPattern('abba', 'dog cat cat fish'))
