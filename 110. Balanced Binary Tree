# Definition for a binary tree node.
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None


class Solution:
    def isBalanced(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        # 判断一棵二叉树是否是高度平衡——一个二叉树每个节点的左右两个子树的高度差的绝对值不超过1。
        # 递归计算每个节点的左右子树的高度，求差值，有一个结点的差值>1，则返回False，递归到底则返回True
        if not root:
            return True
        left_height = self.__height(root.left)
        right_height = self.__height(root.right)
        if abs(left_height - right_height) > 1:
            return False
        return self.isBalanced(root.left) and self.isBalanced(root.right)

    def __height(self, node):
        if not node:
            return 0
        return 1 + max(self.__height(node.left), self.__height(node.right))
