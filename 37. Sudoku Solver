class Solution:
    def solveSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: void Do not return anything, modify board in-place instead.
        """
        if not board:
            return
        m = len(board)
        if m > 9:
            return
        assert m >0
        n = len(board[0])
        if n > 9:
            return
        self.__dfs(board, 0, 0)
    
    def __dfs(self, board, i, j):
        if i == 9:
            return True
        if j == 9:
            return self.__dfs(board, i + 1, 0)
        
        if board[i][j] == '.':
            for num in range(9):
                board[i][j] = str(num+1)
                # print(board[i][j])
                if self.__is_valid(board, i, j):
                    if self.__dfs(board, i, j + 1):
                        return True
                board[i][j] = '.'
            return False
        else:
            return self.__dfs(board, i, j + 1)
    
    def __is_valid(self, board, i, j):
        for row in range(9):
            if i != row and board[row][j] == board[i][j]:
                return False
        for col in range(9):
            if j != col and board[i][col] == board[i][j]:
                return False
        for row in range(i // 3 * 3, i // 3 * 3 + 3):
            for col in range(j // 3 * 3, j // 3 * 3 + 3):
                if (row != i or col != j) and board[row][col] == board[i][j]:
                    return False
        return True
