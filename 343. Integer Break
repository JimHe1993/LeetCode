class Solution:
    def integerBreak(self, n):
        """
        :type n: int
        :rtype: int
        """
#         if n <= 1:
#             return -1
#         # 记忆化搜索
#         memo = [-1] * (n + 1)
#         self.__break_integer(n, memo)
#         return memo[n]
    
#     def __break_integer(self, n, memo):
#         '''
#         拆分 n，至少做2分割，使得分割数字乘积最大
#         '''
#         if n == 1:
#             return 1
#         if memo[n] != -1:
#             return memo[n]
#         res = -1
#         for num in range(1, n):
#             res = max(res, num * (n - num), num * self.__break_integer(n - num, memo))
#         memo[n] = res
#         return res

        # 动态规划
        if n <= 1:
            return -1
        memo = [-1] * (n + 1)
        memo[1] = 1
        for i in range(2, n+1):
            for j in range(1, i):
               memo[i] = max(memo[i], j * (i - j), j * memo[i - j])
        return memo[n]
