class Solution:
    def maxArea(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        '''
        抽象建模：考虑索引坐标轴所在的底面平面宽度一致，底面面积由长度确定大小，
        即由索引值差表示面积，如 p=0，q=len(height)-1，此时长度为 q-p
        而容器高度由当前两索引对应的最小值确定，即 min(height[p], height[q])
        求最大容积：(q-p) * min(height[p], height[q])
        '''
        # 使用对撞指针，每次求出当前双指针对应的容积，若大于已知最大容积则替换，否则继续移动比较
        # 移除高度较小的高度
        if not height:
            return 0
        len_h = len(height)
        if len_h < 2:
            return 0
        p = 0
        q = len_h - 1
        max_cubage = 0  # 初始容积为0
        while p < q:
            if height[p] < height[q]:
                if height[p] * (q - p) > max_cubage:
                    max_cubage = height[p] * (q - p)
                p += 1
            else:
                if height[q] * (q - p) > max_cubage:
                    max_cubage = height[q] * (q - p)
                q -= 1
        return max_cubage


if __name__ == "__main__":
    solve = Solution()
    print(solve.maxArea([1, 8, 6, 2, 5, 4, 8, 3, 7]))
