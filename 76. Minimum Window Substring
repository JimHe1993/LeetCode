class Solution:
    def minWindow(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        '''
        题目要求在s中找出包含t的所有字符的最小子串。
        1、如何保证当前遍历的子串已经全部包含t的所有字符
        使用字典统计词频，记录字符个数
        2、维护一个窗口[i...j]，使得该窗口包含T的所有字符，之后选择最小子串
        '''
        if not s or not t:
            return ''
        len_s = len(s)
        len_t = len(t)
        if len_s < len_t:
            return ''
        dict_t = {}
        for tt in t:
            if tt not in dict_t:
                dict_t[tt] = 1
            else:
                dict_t[tt] += 1
        min_len = len_s + 1
        index = -1
        dict_s = {}
        s_count = 0
        # 维护一个窗口[i...j]，使得该窗口包含T的所有字符
        i = 0
        j = -1
        while i < len_s:
            if j + 1 < len_s and s_count < len_t:
                j += 1
                if s[j] not in dict_s:
                    dict_s[s[j]] = 1
                else:
                    dict_s[s[j]] += 1
                if s[j] in dict_t:
                    if dict_s[s[j]] <= dict_t[s[j]]:
                        s_count += 1
            else:
                assert s_count <= len_t, '统计错误'
                if s_count == len_t and j - i + 1 < min_len:
                    min_len = j - i + 1
                    index = i
                dict_s[s[i]] -= 1
                if s[i] in dict_t:
                    if dict_s[s[i]] < dict_t[s[i]]:
                        s_count -= 1
                i += 1
        if index != -1:
            return s[index: index + min_len]
        return ''


if __name__ == "__main__":
    solve = Solution()
    print(solve.minWindow("ADOBECODEBANC", "ABC"))
