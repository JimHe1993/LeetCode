class Solution:
    def minWindow(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        if not s or not t:
            return ''
        
        dict_t = {}
        for tt in t:
            if tt not in dict_t:
                dict_t[tt] = 1
            else:
                dict_t[tt] += 1
        dict_s = {}
        s_cnt = 0
        
        min_len = len(s) + 1
        idx = -1
        # 维护一个窗口[i..j]，使得该窗口包含T所有字母
        i = 0
        j = -1
        while i < len(s):
            if j + 1 < len(s) and s_cnt < len(t):
                j += 1
                if s[j] not in dict_s:
                    dict_s[s[j]] = 1
                else:
                    dict_s[s[j]] += 1
                if s[j] in dict_t:
                    if dict_s[s[j]] <= dict_t[s[j]]:
                        s_cnt += 1
            else:
                assert s_cnt <= len(t)
                if s_cnt == len(t) and j - i + 1 < min_len:
                    min_len = j -i + 1
                    idx = i
                dict_s[s[i]] -= 1
                if s[i] in dict_t:
                    if dict_s[s[i]] < dict_t[s[i]]:
                        s_cnt -= 1
                i += 1
        if idx != -1:
            return s[idx : idx + min_len]
        return ''
        
