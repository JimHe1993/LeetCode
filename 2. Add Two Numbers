# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        dummy_head = ListNode(-1)
        pre = dummy_head
        carry = False
        while l1 and l2:
            num1 = l1.val
            num2 = l2.val
            if carry:
                summ = num1 + num2 + 1
                if summ >= 10:
                    pre.next = ListNode(summ - 10)
                    carry = True
                else:
                    pre.next = ListNode(summ)
                    carry = False
            else:
                summ = num1 + num2
                if summ >= 10:
                    pre.next = ListNode(summ - 10)
                    carry = True
                else:
                    pre.next = ListNode(summ)
                    carry = False
            pre = pre.next
            l1 = l1.next
            l2 = l2.next
        while l1:
            if carry:
                summ = l1.val + 1
                if summ >= 10:
                    pre.next = ListNode(summ - 10)
                    carry = True
                else:
                    pre.next = ListNode(summ)
                    carry = False
                l1 = l1.next
                pre = pre.next
            else:
                pre.next = l1
                break
        while l2:
            if carry:
                summ = l2.val + 1
                if summ >= 10:
                    pre.next = ListNode(summ - 10)
                    carry = True
                else:
                    pre.next = ListNode(summ)
                    carry = False
                l2 = l2.next
                pre = pre.next
            else:
                pre.next = l2
                break
        if carry:
            pre.next = ListNode(1)
        return dummy_head.next
