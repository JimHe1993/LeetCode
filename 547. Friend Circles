class Solution:
    
    # class UnionFind(object):
    #     def __init__(self, n):
    #         self.__id = [i for i in range(n)]
    #         
    #     def find(self, p):
    #         assert 0 <= p <= len(self.__id) - 1
    #         return self.__id[p]
    #     
    #     def is_connected(self, p, q):
    #         return self.find(p) == self.find(q)
    #     
    #     def union(self, p, q):
    #         p_id = self.find(p)
    #         q_id = self.find(q)
    #         
    #         if p_id == q_id:
    #             return
    #         
    #         for i in range(len(self.__id)):
    #             if self.__id[i] == p_id:
    #                 self.__id[i] = q_id
    
    class UnionFind(object):
        def __init__(self, n):
            self.__parent = [i for i in range(n)]
            # self.__sz = [1] * n
            self.__rank = [1] * n
        
        def find(self, p):
            assert 0 <= p <= len(self.__parent)-1
            while p != self.__parent[p]:
                # p = self.__parent[p]
                self.__parent[p] = self.__parent[self.__parent[p]]
                p = self.__parent[p]
            return p
            # if p != self.__parent[p]:
            #     self.__parent[p] = self.find(self.__parent[p])
            # return self.__parent[p]
        
        def union(self, p, q):
            p_root = self.find(p)
            q_root = self.find(q)
            
            if p_root == q_root:
                return
            
            if self.__rank[p_root] > self.__rank[q_root]:
                self.__parent[q_root] = p_root
            elif self.__rank[p_root] < self.__rank[q_root]:
                self.__parent[p_root] = q_root
            else:
                self.__parent[p_root] = q_root
                self.__rank[q_root] += 1
    
    def findCircleNum(self, M):
        """
        :type M: List[List[int]]
        :rtype: int
        """
        if not M:
            return 0
        uf = Solution.UnionFind(len(M))
        for i in range(len(M)):
            for j in range(i):
                if M[i][j] == 1:
                    uf.union(i, j)
        set_friends = set()
        for i in range(len(M)):
            set_friends.add(uf.find(i))
        return len(set_friends)
        
