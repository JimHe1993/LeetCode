# Definition for a binary tree node.
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None


class Solution:
    def countNodes(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        # 计算完全二叉树的节点个数
        # 迭代计算（层序遍历思想），当有空结点出现时，一定是倒数第二层，加上倒数第一层结点数即可
        # if not root:
        #     return 0
        # queue = [root]
        # level = 1
        # sum_node = 2 ** (level - 1)
        # while True:
        #     flag = False
        #     temp = []
        #     for node in queue:
        #         if not node.left:
        #             flag = True
        #             break
        #         else:
        #             temp.append(node.left)
        #         if not node.right:
        #             flag = True
        #             break
        #         else:
        #             temp.append(node.right)
        #     if flag:
        #         sum_node += len(temp)
        #         break
        #     else:
        #         level += 1
        #         sum_node += 2 ** (level - 1)
        #         queue = temp
        # return sum_node

        # 递归——完全二叉树的子树仍然是完全二叉树
        # 一棵完全二叉树，最后一层一定有1个结点，或满结点
        # 以此递归，从根节点左子树开始，看看左子树的左偏和右偏是否相同，
        # 若是相同，则左子树一定是满二叉树，计算结点数，递归右子树
        # 若是不相同，则右子树一定是满二叉树（树高减一），计算结点数，递归左子树
        # 递归终止条件：递归到叶子节点
        if not root:
            return 0
        # 计算root的左子树左偏和右偏高度
        left_height = self.__left_height(root.left)
        right_height = self.__right_height(root.left)
        if left_height == right_height:
            return 1 + 2 ** left_height - 1 + self.countNodes(root.right)
        assert left_height == right_height + 1, '非二叉树'
        return 1 + 2 ** right_height - 1 + self.countNodes(root.left)

    def __left_height(self, node):
        if node is None:
            return 0
        return 1 + self.__left_height(node.left)

    def __right_height(self, node):
        if node is None:
            return 0
        return 1 + self.__right_height(node.right)
